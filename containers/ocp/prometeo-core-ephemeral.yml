---
apiVersion: v1
kind: Template
metadata:
  name: prometeo-core-ephemeral
  annotations:
    openshift.io/display-name: Prometeo Core Services (Ephemeral)
    description: |-
      Basic template for the Prometeo core services: Web API and the Log (ephemeral).
      NOTE: The Log service created by this template uses non-persistent storage. To setup persisted storage, change this template to use a persistent volume claim instead of emptydir.
    tags: prometeo, ansible, core-services
    iconClass: icon-ansible
message: |-
  The following service(s) have been created in your project: ${WAPI_SERVICE_NAME}, ${LOG_SERVICE_NAME}.

  For more information about using this template, including OpenShift considerations, see https://github.com/prometeo-cloud/prometeo/ocp/README.md.
labels:
  template: prometeo-core-ephemeral

objects:

- apiVersion: v1
  kind: Service
  metadata:
    name: wapi
    annotations:
      description: Exposes and load balances the web api pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
  spec:
    ports:
    - name: prometeo-core-ephemeral
      port: 8080
      targetPort: 8080
    selector:
      name: prometeo-core-ephemeral

- apiVersion: v1
  kind: Route
  metadata:
    name: prometeo-core-ephemeral
    annotations:
      template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
  spec:
    host: "${WAPI_HOST}"
    to:
      kind: Service
      name: prometeo-core-ephemeral

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${WAPI_SERVICE_NAME}"
    annotations:
      description: Defines how to deploy the Prometeo WAPI
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - prometeo-wapi
        from:
          kind: ImageStreamTag
          name: prometeo:${PROMETEO_VERSION}
          namespace: "${NAMESPACE}"
        lastTriggeredImage: ''
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${WAPI_SERVICE_NAME}"
    template:
      metadata:
        name: "${WAPI_SERVICE_NAME}"
        labels:
          name: "${WAPI_SERVICE_NAME}"
      spec:
        containers:
        - name: prometeo-wapi
          image: " "
          ports:
          - containerPort: "${HTTP_PORT}"
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: "${HTTP_PORT}"
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: "${HTTP_PORT}"
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          env:
          - name: HTTP_PORT
            value: "${HTTP_PORT}"
          - name: CORE_POOL_SIZE
            value: "${CORE_POOL_SIZE}"
          - name: MAX_POOL_SIZE
            value: "${MAX_POOL_SIZE}"
          - name: QUEUE_CAPACITY
            value: "${QUEUE_CAPACITY}"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false

- apiVersion: v1
  kind: Secret
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      template.openshift.io/expose-username: "{.data['database-user']}"
      template.openshift.io/expose-password: "{.data['database-password']}"
      template.openshift.io/expose-admin_password: "{.data['database-admin-password']}"
      template.openshift.io/expose-database_name: "{.data['database-name']}"
  stringData:
    database-user: "prometeo"
    database-password: "${MONGODB_PASSWORD}"
    database-admin-password: "${MONGODB_ADMIN_PASSWORD}"
    database-name: "prometeo"

- apiVersion: v1
  kind: Service
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      template.openshift.io/expose-uri: mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}
  spec:
    ports:
    - name: mongo
      protocol: TCP
      port: 27017
      targetPort: 27017
      nodePort: 0
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:${MONGODB_VERSION}
          namespace: "${NAMESPACE}"
        lastTriggeredImage: ''
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    template:
      metadata:
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - name: mongodb
          image: " "
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 3
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval="quit()"
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
          env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                name: "${DATABASE_SERVICE_NAME}"
                key: database-user
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${DATABASE_SERVICE_NAME}"
                key: database-password
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${DATABASE_SERVICE_NAME}"
                key: database-admin-password
          - name: MONGODB_DATABASE
            valueFrom:
              secretKeyRef:
                name: "${DATABASE_SERVICE_NAME}"
                key: database-name
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
          volumeMounts:
          - name: "${DATABASE_SERVICE_NAME}-data"
            mountPath: "/var/lib/mongodb/data"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          emptyDir:
            medium: ''
        restartPolicy: Always
        dnsPolicy: ClusterFirst
  status: {}

parameters:

- name: WAPI_HOST
  description: The exposed hostname that will route to the Web API service, if left blank a value will be defaulted.
  value: ''

- name: PROMETEO_VERSION
  description: Tag of the image to use for Prometeo
  value: '0.0.1-0'
  required: true

- name: WAPI_SERVICE_NAME
  description: Prometeo service name
  value: prometeo-wapi

- name: CORE_POOL_SIZE
  displayName: Core Pool Size
  description: The core size of the WAPI thead pool.
  value: '2'

- name: MAX_POOL_SIZE
  displayName: Maximum Pool Size
  description: The maximum size of the WAPI thead pool.
  value: '5'

- name: QUEUE_CAPACITY
  displayName: Thread Pool Queue Capacity
  description: The capacity of the WAPI thead pool queue.
  value: '500'

- name: NAMESPACE
  displayName: Namespace
  description: The OpenShift Namespace where the ImageStream resides.
  value: openshift

- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the container can use.
  value: 512Mi
  required: true

- name: DATABASE_SERVICE_NAME
  displayName: Database Service Name
  description: The name of the OpenShift Service exposed for the database.
  value: mongodb
  required: true

- name: MONGODB_PASSWORD
  displayName: MongoDB Connection Password
  description: Password for the MongoDB connection user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true

- name: MONGODB_ADMIN_PASSWORD
  displayName: MongoDB Admin Password
  description: Password for the database admin user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true

- name: MONGODB_VERSION
  displayName: Version of MongoDB Image
  description: Version of MongoDB image to be used (2.4, 2.6, 3.2 or latest).
  value: '3.2'
  required: true